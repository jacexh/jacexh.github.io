<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jace&#39;s Blog</title>
    <link>http://blog.xuh.me/post/</link>
    <description>Recent content in Posts on Jace&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 17 Jan 2019 15:25:19 +0800</lastBuildDate>
    
	<atom:link href="http://blog.xuh.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ultron</title>
      <link>http://blog.xuh.me/post/ultron/</link>
      <pubDate>Thu, 17 Jan 2019 15:25:19 +0800</pubDate>
      
      <guid>http://blog.xuh.me/post/ultron/</guid>
      <description>Ultron使用手册 [TOC]
1. 开发背景 在一次与其他压测工具比较的过程中（https://phabricator.wosai-inc.com/T189），我无意发现之前使用的Locust有致命的性能问题：对于极快的GET接口，其产生的压力比AB、JMeter等少了几个量级，再加上我本身不满因Locust使用Python开发只能利用单核而导致经常需要多实例部署的情况，我决定利用Golang原生的高并发能力来重写一个压测工具。
我希望它满足以下特性：
 单实力高并发能力 支持分布式部署 支持接入多种协议 脚本层面借鉴Locust的方式，高度的定制化能力  但与成熟的压测工具相比，Ultron存在以下明显的劣势：
 缺少GUI界面，门槛较高，需要一定的Golang编程能力 更像一个“压测执行框架”，而不是工具 目前仅接入http协议，插件也极少 虽然开源（https://github.com/jacexh/ultron），但未做推广，使用者极少  2 主要对象介绍 2.1 Attacker type Attacker interface { Name() string Fire() error }  Attacker是请求行为、事务的interface，结构体HTTPAttacker是该interface的一个实现，其作用是使用内置net/http包来处理http请求
其中Name()方法返回了请求行为的名称，在http压测中，可以理解为接口名
Fire()方法是请求的行为，当结果返回为nil即没有错误时，则认为请求成功，反之视为请求失败，并记录具体的错误信息
2.2 Runner type Runner interface { WithConfig(*RunnerConfig) WithTask(*Task) GetConfig() *RunnerConfig GetStatus() Status Start() Done() }  测试执行器，目前具体的实现有localRunner、masterRunner、slaveRunner，分别用于单机压测、分布式压测的控制台、分布式压测的节点
2.3 RunnerConfig type RunnerConfig struct { Duration time.Duration `json:&amp;quot;duration&amp;quot;` Requests uint64 `json:&amp;quot;requests&amp;quot;` Concurrence int `json:&amp;quot;concurrence&amp;quot;` HatchRate int `json:&amp;quot;hatch_rate&amp;quot;` MinWait time.</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>http://blog.xuh.me/post/second/</link>
      <pubDate>Thu, 17 Jan 2019 15:23:40 +0800</pubDate>
      
      <guid>http://blog.xuh.me/post/second/</guid>
      <description> 染色标示增强 [TOC]
1. 现有方案 在第一期的支付网关全链路压测中，通过在http请求头增加fake: 1来染色流量，实现上比较简单。
2. 场景补充 但在更复杂的场景中遇到了以下一些问题：
2.1 core-business的getAllParams接口 在upay-gateway作为调用方是的逻辑：
st=&amp;gt;start: 调用开始（terminal_sn） e=&amp;gt;end: 调用结束 fake=&amp;gt;condition: 是否是压测流量 db=&amp;gt;operation: 从原DB取数据 offset=&amp;gt;operation: 偏移数据 st-&amp;gt;db-&amp;gt;fake fake(yes)-&amp;gt;offset-&amp;gt;e fake(no)-&amp;gt;e  3. 增强方案 </description>
    </item>
    
  </channel>
</rss>