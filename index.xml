<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jace&#39;s Blog</title>
    <link>https://blog.xuh.me/</link>
    <description>Recent content on Jace&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>jace.xh@gmail.com (jacexh)</managingEditor>
    <webMaster>jace.xh@gmail.com (jacexh)</webMaster>
    <copyright>xuh.me — All rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Jun 2019 09:15:07 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xuh.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python接口测试实战6 - 序列化与反序列化</title>
      <link>https://blog.xuh.me/posts/api-testing-006/</link>
      <pubDate>Mon, 24 Jun 2019 09:15:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-006/</guid>
      <description>&lt;h2 id=&#34;理解什么是序列化&#34;&gt;理解什么是序列化&lt;/h2&gt;

&lt;p&gt;在我面试有接口测试经验的候选人的时候，经常会问一个问题：如何对返回的响应结果（假设json格式）中的字段值进行断言？我一般得到的答复是&lt;strong&gt;通过正则表达式&lt;/strong&gt;，有一部分候选人会说&lt;strong&gt;使用JSON Path&lt;/strong&gt;，这就是让我非常困惑的一个地方：好像大部分测试人员都不知道&lt;strong&gt;序列化&lt;/strong&gt;和&lt;strong&gt;反序列化&lt;/strong&gt;这种重要的基础概念。&lt;/p&gt;

&lt;p&gt;我以一个例子来展开：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, age, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;courses):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;courses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; courses

mike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Student(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike Hsu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chinese&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战5 - 面向服务封装</title>
      <link>https://blog.xuh.me/posts/api-testing-005/</link>
      <pubDate>Sun, 23 Jun 2019 09:15:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-005/</guid>
      <description>&lt;p&gt;上一篇我们封装了&lt;code&gt;def list_issues()&lt;/code&gt;接口，在这一节正式开讲前，我们以同样的方法封装另外个接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://www.redmine.org/projects/redmine/wiki/Rest_Issues#Listing-issues&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_issues&lt;/span&gt;(api_key, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;按条件查询issue&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://redmine.xuh.me/issues.json&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kwargs, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Redmine-API-Key&amp;#34;&lt;/span&gt;: api_key})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text


&lt;span style=&#34;color:#75715e&#34;&gt;# https://www.redmine.org/projects/redmine/wiki/Rest_Issues#Showing-an-issue&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_issue&lt;/span&gt;(api_key, issue_id, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;根据issue_id获取issue详情&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://redmine.xuh.me/issues/{}.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(issue_id), params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kwargs, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Redmine-API-Key&amp;#34;&lt;/span&gt;: api_key})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战4 - 封装redmine接口</title>
      <link>https://blog.xuh.me/posts/api-testing-004/</link>
      <pubDate>Mon, 03 Jun 2019 17:29:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-004/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为了更好的演示接口测试，笔者部署了一个&lt;a href=&#34;http://redmine.xuh.me&#34;&gt;Redmine服务&lt;/a&gt;，本系列文章均以该系统作为被测试服务，当然你也可以自己搭建一个redmine系统，可以利用docker快速部署：&lt;a href=&#34;https://hub.docker.com/_/redmine&#34;&gt;https://hub.docker.com/_/redmine&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-接口文档&#34;&gt;1. 接口文档&lt;/h2&gt;

&lt;p&gt;接口文档是进行接口测试的必要输入，一份好的接口文档笔者认为需要包含以下要素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接口的鉴权方法&lt;/li&gt;
&lt;li&gt;接口的调用时序&lt;/li&gt;
&lt;li&gt;接口的必传、可选参数，以及各参数的语义&lt;/li&gt;
&lt;li&gt;接口响应报文，以及相关字段语义&lt;/li&gt;
&lt;li&gt;接口请求、响应报文demo&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DataStore使用介绍</title>
      <link>https://blog.xuh.me/posts/datastore-manuals/</link>
      <pubDate>Thu, 23 May 2019 16:20:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/datastore-manuals/</guid>
      <description>&lt;p&gt;在测试框架的&lt;code&gt;data&lt;/code&gt;目录下有&lt;code&gt;test.json&lt;/code&gt;、&lt;code&gt;test2.json&lt;/code&gt;两份文件，用于存放test、test2环境的静态测试数据，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;581e3432-9f03-0ae3-ddc5-d197601c6850&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sn&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00000261001200200019186&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;自动化测试门店&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;industry&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e586aa25-312d-11e6-aebb-ecf4bbdee2f0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;江苏省&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;苏州市&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;姑苏区&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;干将路99号&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;merchant&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_merchant&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contact_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Robot&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contact_cellphone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10088880001&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cashiers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_cashier&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admins&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_admin&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@object&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@extended&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_store&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;
    }
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5c82b3f9-e5d2-4e21-ab4b-800d6c7b7265&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sn&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1580000000517499&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无锡办事处&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;industry&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e586aa25-312d-11e6-aebb-ecf4bbdee2f0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;江苏省&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无锡市&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;崇安区&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;湖滨大道99号&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contact_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill Smith&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contact_cellphone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10088880002&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;merchant&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_merchant&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admins&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alternative_admin&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cashiers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alternative_cashier&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@object&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@extended&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alternative_store&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在阿里云内搭建高可用的Kubernetes集群</title>
      <link>https://blog.xuh.me/posts/create-high-availability-kubernetes-cluster-on-aliyun/</link>
      <pubDate>Mon, 15 Apr 2019 10:11:05 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/create-high-availability-kubernetes-cluster-on-aliyun/</guid>
      <description>&lt;p&gt;本文完整地记录下了在阿里云内网构建一个高可用Kubernetes集群的过程。&lt;/p&gt;

&lt;h3 id=&#34;硬件资源&#34;&gt;硬件资源&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-002&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-003&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;worker-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SLB&lt;/td&gt;
&lt;td&gt;internal-slb&lt;/td&gt;
&lt;td&gt;ip: 192.168.200.1  内网SLB，内网流量入口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SLB&lt;/td&gt;
&lt;td&gt;public-slb&lt;/td&gt;
&lt;td&gt;ip: 100.100.100.100 公网SLB，外网流量入口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;haproxy-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.110.1 HAProxy集群，不部署kubernetes节点(下文详细说明)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;haproxy-002&lt;/td&gt;
&lt;td&gt;ip: 192.168.110.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>分布式系统基础知识</title>
      <link>https://blog.xuh.me/posts/distribution-system-knowledge-point/</link>
      <pubDate>Tue, 09 Apr 2019 10:06:05 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/distribution-system-knowledge-point/</guid>
      <description>&lt;h2 id=&#34;cap定理&#34;&gt;CAP定理&lt;/h2&gt;

&lt;p&gt;布鲁尔定理，它指出对于一个分布式计算系统来说，不可能同时满足一下三点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一致性(Consistency): 所有节点访问同一份最新的数据副本&lt;/li&gt;
&lt;li&gt;可用性(Availability)：每次请求都能获取到非错的响应-但是不保证获取的数据为最新数据&lt;/li&gt;
&lt;li&gt;分区容错性（Partition tolerance）：系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ultron使用手册</title>
      <link>https://blog.xuh.me/posts/ultron-manuals/</link>
      <pubDate>Mon, 29 Oct 2018 11:20:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/ultron-manuals/</guid>
      <description>&lt;h2 id=&#34;1-开发背景&#34;&gt;1. 开发背景&lt;/h2&gt;

&lt;p&gt;在一次与其他压测工具比较的过程中，我无意发现之前使用的Locust有致命的性能问题：对于极快的GET接口，其产生的压力比AB、JMeter等少了几个量级，再加上我本身不满因Locust使用Python开发只能利用单核而导致经常需要多实例部署的情况，我决定利用Golang原生的高并发能力来重写一个压测工具。&lt;/p&gt;

&lt;p&gt;我希望它满足以下特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单实力高并发能力&lt;/li&gt;
&lt;li&gt;支持分布式部署&lt;/li&gt;
&lt;li&gt;支持接入多种协议&lt;/li&gt;
&lt;li&gt;脚本层面借鉴Locust的方式，高度的定制化能力&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战3 - 接口封装的基石：requests.Session</title>
      <link>https://blog.xuh.me/posts/api-testing-003/</link>
      <pubDate>Tue, 29 May 2018 09:01:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-003/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://my-storage.oss-cn-shanghai.aliyuncs.com/picgo/20190419090155.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;笔者在面试候选人的时候，如果恰巧对方使用过&lt;code&gt;requests&lt;/code&gt;库，一般会问一个问题：谈一下你对&lt;code&gt;requests.Session&lt;/code&gt;对象的理解？&lt;/p&gt;

&lt;p&gt;一个很简单的问题，但印象中几乎没有候选人回答上来过，而且很多人在使用&lt;code&gt;requests&lt;/code&gt;做接口测试，但居然不知道&lt;code&gt;Session&lt;/code&gt;这个对象，这让我有点匪夷所思。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战02 - 接口测试的本质</title>
      <link>https://blog.xuh.me/posts/api-testing-002/</link>
      <pubDate>Sun, 20 May 2018 08:53:34 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-002/</guid>
      <description>&lt;p&gt;在上一篇简单的介绍了接口测试里用到的工具、类库后，本篇正式开始讲用Python进行接口测试实战。&lt;/p&gt;

&lt;h3 id=&#34;1-从一个登录接口了解接口调用的方法&#34;&gt;1. 从一个登录接口了解接口调用的方法&lt;/h3&gt;

&lt;p&gt;现在假设有一个登录接口&lt;code&gt;POST /api/login&lt;/code&gt;，该接口有两个入参&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;，分别表示帐号的用户名以及密码，那该如何调用该接口呢？&lt;/p&gt;

&lt;p&gt;&lt;em&gt;以下该登录接口都以一个临时的url:&lt;a href=&#34;http://requestbin.qahub.net/z3m6v8z3来替代&#34;&gt;http://requestbin.qahub.net/z3m6v8z3来替代&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-curl做接口调用&#34;&gt;1.1 curl做接口调用：&lt;/h4&gt;

&lt;p&gt;先用curl来做一个简单的例子：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战01：七种武器</title>
      <link>https://blog.xuh.me/posts/api-testing-001/</link>
      <pubDate>Sat, 19 May 2018 08:42:22 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-001/</guid>
      <description>&lt;p&gt;工欲善其事必先利其器，在正式开始介绍使用Python做接口测试前，我们先准备好相应的工具，这样就能快速上手接口测试了。&lt;/p&gt;

&lt;h3 id=&#34;0-python&#34;&gt;0. Python&lt;/h3&gt;

&lt;p&gt;在测试领域Python其实大有可为，不管是Web、移动端、接口、嵌入式测试都能看到Python的身影。而且因为Python语法的简单性，用Python做自动化测试的效率极高。&lt;/p&gt;

&lt;p&gt;有人可能会说：&lt;strong&gt;Python运行效率低啊。&lt;/strong&gt;可是你想想，在自动化测试应用时，我们需要在乎底层脚本语言的运行效率吗？与其在乎运行效率，还不如思考下如何快速提高自动化测试的覆盖率，也就是自动化case的开发效率。&lt;/p&gt;

&lt;p&gt;Python有Python2以及Python3两个大版本，Python2行将就木，本系列文章都以Python3为基础，而且有可能会使用到Python3.5以上版本的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Http Client性能验证</title>
      <link>https://blog.xuh.me/posts/golang-http-client-performance/</link>
      <pubDate>Sat, 14 Jan 2017 21:19:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/golang-http-client-performance/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://image.slidesharecdn.com/embeddedsoftwarewithgolang-170224034117/95/embedded-software-with-golang-5-638.jpg?cb=1487907791&#34; alt=&#34;golang&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一直很好奇golang的&lt;code&gt;net/http&lt;/code&gt;的client性能如何，于是我这里做了一次验证，先上代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker解决自动化、性能测试的外部依赖</title>
      <link>https://blog.xuh.me/posts/qa-env-docker/</link>
      <pubDate>Wed, 29 Jul 2015 11:20:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/qa-env-docker/</guid>
      <description>&lt;p&gt;笔者目前在工作中，使用Python来进行项目的自动化、性能测试，但是在不同的环境下准备Python运行环境时遇到了不少的坑，随便列举一些：&lt;/p&gt;

&lt;h4 id=&#34;1-python版本的坑&#34;&gt;1. Python版本的坑：&lt;/h4&gt;

&lt;p&gt;提到Python，最大的坑就是python2.x、python3.x共存的问题&lt;/p&gt;

&lt;p&gt;比如在Ubuntu下部署接口测试的执行环境时，当你用pip安装相关的package，你有时完全搞不清楚这个包是安装在python2下还是在python3下；就算包的路径安装正确了，在执行测试代码时也有可能搞错python的解析器&lt;/p&gt;

&lt;p&gt;大版本有坑，小版本也存在不少坑。比如在&lt;strong&gt;2.7.6&lt;/strong&gt;之前的版本，用&lt;strong&gt;urlib3&lt;/strong&gt;请求&lt;strong&gt;https&lt;/strong&gt;的连接会出现ssl证书校验失败的问题；而当使用&lt;strong&gt;2.7.9&lt;/strong&gt;这个版本时，&lt;strong&gt;Locust&lt;/strong&gt;依赖的gevent对https的请求也会出现问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Locust负载测试框架初探</title>
      <link>https://blog.xuh.me/posts/locust-intro/</link>
      <pubDate>Mon, 20 Jul 2015 15:28:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/locust-intro/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://locust.io/&#34;&gt;Locust&lt;/a&gt;是一款类似于&lt;code&gt;Jmeter&lt;/code&gt;开源负载测试工具，所不同的是它是用python实现，并支持python脚本。 &lt;code&gt;locust&lt;/code&gt;提供web ui界面，能够方便用户实时监控脚本运行状态。&lt;/p&gt;

&lt;p&gt;这里我以模拟公司OA系统登录、注销为例，简单的了解下&lt;code&gt;locust&lt;/code&gt;的使用。&lt;/p&gt;

&lt;h2 id=&#34;locust的安装&#34;&gt;Locust的安装&lt;/h2&gt;

&lt;h3 id=&#34;python的安装&#34;&gt;Python的安装&lt;/h3&gt;

&lt;p&gt;Windows用户可以从&lt;a href=&#34;http://python.org&#34;&gt;Python官网&lt;/a&gt;下载适合你系统的安装程序进行安装；在安装完成后，建议将默认安装路径&lt;code&gt;C:\Python27&lt;/code&gt;添加到系统环境变量中，另外一并将&lt;code&gt;C:\Python27\Scripts&lt;/code&gt;(当前该目录可能不存在)也添加进去&lt;/p&gt;

&lt;p&gt;Linux/Unix用户则可以略过这一步骤，系统本身已经有Python的存在，当然你如果对当前版本不满意的话，可以再自行安装熟悉的版本&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>