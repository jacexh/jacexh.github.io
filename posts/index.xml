<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jace&#39;s Blog</title>
    <link>https://blog.xuh.me/posts/</link>
    <description>Recent content in Posts on Jace&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>jace.xh@gmail.com (jacexh)</managingEditor>
    <webMaster>jace.xh@gmail.com (jacexh)</webMaster>
    <copyright>xuh.me — All rights reserved.</copyright>
    <lastBuildDate>Mon, 15 Apr 2019 10:11:05 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xuh.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在阿里云内搭建高可用的Kubernetes集群</title>
      <link>https://blog.xuh.me/posts/create-high-availability-kubernetes-cluster-on-aliyun/</link>
      <pubDate>Mon, 15 Apr 2019 10:11:05 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/create-high-availability-kubernetes-cluster-on-aliyun/</guid>
      <description>&lt;p&gt;本文完整地记录下了在阿里云内网构建一个高可用Kubernetes集群的过程。&lt;/p&gt;

&lt;h3 id=&#34;硬件资源&#34;&gt;硬件资源&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-002&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;master-003&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;worker-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.100.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SLB&lt;/td&gt;
&lt;td&gt;internal-slb&lt;/td&gt;
&lt;td&gt;ip: 192.168.200.1  内网SLB，内网流量入口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SLB&lt;/td&gt;
&lt;td&gt;public-slb&lt;/td&gt;
&lt;td&gt;ip: 100.100.100.100 公网SLB，外网流量入口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;haproxy-001&lt;/td&gt;
&lt;td&gt;ip: 192.168.110.1 HAProxy集群，不部署kubernetes节点(下文详细说明)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;haproxy-002&lt;/td&gt;
&lt;td&gt;ip: 192.168.110.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>分布式系统基础知识</title>
      <link>https://blog.xuh.me/posts/distribution-system-knowledge-point/</link>
      <pubDate>Tue, 09 Apr 2019 10:06:05 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/distribution-system-knowledge-point/</guid>
      <description>&lt;h2 id=&#34;cap定理&#34;&gt;CAP定理&lt;/h2&gt;

&lt;p&gt;布鲁尔定理，它指出对于一个分布式计算系统来说，不可能同时满足一下三点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一致性(Consistency): 所有节点访问同一份最新的数据副本&lt;/li&gt;
&lt;li&gt;可用性(Availability)：每次请求都能获取到非错的响应-但是不保证获取的数据为最新数据&lt;/li&gt;
&lt;li&gt;分区容错性（Partition tolerance）：系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Locust负载测试框架初探</title>
      <link>https://blog.xuh.me/posts/locust-intro/</link>
      <pubDate>Mon, 20 Jul 2015 15:28:00 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/locust-intro/</guid>
      <description>Locust是一款类似于Jmeter开源负载测试工具，所不同的是它是用python实现，并支持python脚本。 locust提供web ui界面，能够方便用户实时监控脚本运行状态。
这里我以模拟公司OA系统登录、注销为例，简单的了解下locust的使用。
Locust的安装 Python的安装 Windows用户可以从Python官网下载适合你系统的安装程序进行安装；在安装完成后，建议将默认安装路径C:\Python27添加到系统环境变量中，另外一并将C:\Python27\Scripts(当前该目录可能不存在)也添加进去
Linux/Unix用户则可以略过这一步骤，系统本身已经有Python的存在，当然你如果对当前版本不满意的话，可以再自行安装熟悉的版本
完善Python环境 setuptools setuptools, pip都是是python的包管理工具，建议安装，windows用户参照这篇文档进行安装: https://pypi.python.org/pypi/setuptools#windows-powershell-3-or-later
pip 完成上一个步骤之后，打开cmd窗口执行下列命令安装pip:
easy_install -U pip 这个时候就可以使用pip进行包管理了
国内用户使用easy_install,pip安装包过慢的话，可以使用国内镜像服务器安装，如：
pip install -i http://pypi.douban.com/simple/ -U selenium virtualenv virtualenv可以创建虚拟的python开发环境，一个专属于项目的开发环境，避免与其他环境冲突
通过pip安装如下：
pip install -U virtualenv 到此，一个完善的python开发环境搭建完成了
locust安装 locust同样可以使用pip进行安装
pip install -U locustio 然后安装pyzmq
pip install -U pyzmq locust压力测试实战 了解OA系统登录行为 登录过程 公司OA系统的登录页面为http://oa.company.com/CasServer/login，从UI界面上看，只需要输入公司邮箱以及密码即可登录： 然而简单的猜测并不靠谱，必须要有详细的数据来佐证猜想，这里为了排查清楚登录OA系统到底post了什么的数据，可以借助第三方工具如wireshark进行抓包
从抓包结果来看，整个登录过程的确没有想象的简单，登录时不仅向系统post了username,password两个字段，还有随机产生的lt以及execution字段
查看网页的源代码，找到这两个字段的位置:
也就是说，要模拟用户的登录行为，就必须从网页的源代码中抠出这两个字段的值
注销过程 OA系统注销的过程很简单，只需要get特定的uri即可 http://oa.company.com/CasServer/logout
locust脚本 了解整个登录、注销过程后就可以进入实质的脚本开发过程了
提取lt execution字段值 这里我使用熟悉的xpath方式来提取这两个字段的值
首先安装xml处理库lxml
pip install -U lxml lt字段值的xpath表达式为:
&amp;#34;//div[@class=&amp;#39;btnbox&amp;#39;]/input[@name=&amp;#39;lt&amp;#39;]/@value&amp;#34; execution字段值的xpath表达式为：</description>
    </item>
    
    <item>
      <title>使用Docker解决自动化、性能测试的外部依赖</title>
      <link>https://blog.xuh.me/posts/qa-env-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/qa-env-docker/</guid>
      <description>笔者目前在工作中，使用Python来进行项目的自动化、性能测试，但是在不同的环境下准备Python运行环境时遇到了不少的坑，随便列举一些：
1. Python版本的坑： 提到Python，最大的坑就是python2.x、python3.x共存的问题
比如在Ubuntu下部署接口测试的执行环境时，当你用pip安装相关的package，你有时完全搞不清楚这个包是安装在python2下还是在python3下；就算包的路径安装正确了，在执行测试代码时也有可能搞错python的解析器
大版本有坑，小版本也存在不少坑。比如在2.7.6之前的版本，用urlib3请求https的连接会出现ssl证书校验失败的问题；而当使用2.7.9这个版本时，Locust依赖的gevent对https的请求也会出现问题
2. Jenkins部署之坑： 在Jenkins部署时，我们用virtualenv来隔离系统侧python与任务侧的python，这样的好处就是每个任务中的python依赖都可以自定义，且不受干扰。
但带来了另外个问题：当不同任务的依赖相同时，会重复创建多份依赖；另外，在virtualenv环境下用pip安装依赖时，也会遇到各种权限问题，这里就不展开讲了。
3. 操作系统的坑： OS的区别其实对接口测试影响还不大，主要是影响了性能测试。
笔者使用的Locust是基于gevent这个包，而gevent只有在linux环境下才能发挥最佳性能，所以之前笔者在OS X下发现locust产生的并发量很小主要是因为这个问题。
Docker化自动化、性能测试的实践 首先声明，这一段不是新手教程，只是些Docker实践的记录 ：）
1. 安装Docker Docker最佳宿主环境（可理解成你的操作系统）应该是Ubuntu，当使用这个操作系统时可以直接按照官方文档来进行： https://docs.docker.com/installation/ubuntulinux/
而在Windows、Mac OS X下，Docker其实无法直接安装，所以目前的策略是在这两个系统下启动一个Linux虚拟机，然后将Docker安装在这个虚拟机下
2. 构建Python运行环境 完成了Docker引擎的安装，然后开始创建一个最基础的Python运行环境
如果直接在ubuntu下用apt-get只能安装2.7.6版本的python，而这个版本存在一定的问题，所以这里我选用了最新的2.7.10版本，尝试从源码进行编译安装
创建名为Dockerfile的文件：
FROM ubuntu:14.04 MAINTAINER Jace Xu &amp;lt;jace@xuh.me&amp;gt; ENV REFRESHED_AT 2015-06-22 ENV DEBIAN_FRONTEND noninteractive RUN echo &amp;#34;Asia/Shanghai&amp;#34; &amp;gt; /etc/timezone &amp;amp;&amp;amp; dpkg-reconfigure -f noninteractive tzdata RUN apt-get -yqq update RUN apt-get -yqq install wget curl xz-utils build-essential zlib1g-dev RUN apt-get -yqq install libssl-dev RUN apt-get purge -yqq python.</description>
    </item>
    
  </channel>
</rss>