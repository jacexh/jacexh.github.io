<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jace&#39;s Blog</title>
    <link>https://blog.xuh.me/tags/python/</link>
    <description>Recent content in Python on Jace&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>jace.xh@gmail.com (jacexh)</managingEditor>
    <webMaster>jace.xh@gmail.com (jacexh)</webMaster>
    <copyright>xuh.me — All rights reserved.</copyright>
    <lastBuildDate>Wed, 14 Aug 2019 09:11:07 +0800</lastBuildDate>
    
	<atom:link href="https://blog.xuh.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python接口测试实战7 - unittest单元测试框架</title>
      <link>https://blog.xuh.me/posts/api-testing-007/</link>
      <pubDate>Wed, 14 Aug 2019 09:11:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-007/</guid>
      <description>unittest是Python内置的单元测试框架，是一个足够精简也足够完善的单元测试框架，在其中有以下四种概念：
 test fixture test case test suite test runner  我们以一段测试代码样例来展开介绍这四个概念：
import unittest class TestGetIssue(unittest.TestCase): def setUp(self): self.client = RedmineClient(&amp;#34;https://redmine.xuh.me&amp;#34;, &amp;#34;490592ea4e46348df29828edd597acbfdc5ebb4a&amp;#34;) def test_get_issue(self): resp = self.client.get_issue(&amp;#34;1&amp;#34;) self.assertEqual(resp[&amp;#34;issue&amp;#34;][&amp;#34;id&amp;#34;], 1) def test_bad_issue_id(self): resp = self.client.get_issue(&amp;#34;-1&amp;#34;) self.assertIsNone(resp[&amp;#34;issue&amp;#34;]) if __name__ == &amp;#34;__main__&amp;#34;: unittest.main() Test Fixture test fixture中文可以叫做测试夹具，如果对它理解困难的话，可以看下其定于：
 A test fixture represents the preparation needed to perform one or more tests, and any associate cleanup actions. This may involve, for example, creating temporary or proxy databases, directories, or starting a server process.</description>
    </item>
    
    <item>
      <title>Python接口测试实战6 - 序列化与反序列化</title>
      <link>https://blog.xuh.me/posts/api-testing-006/</link>
      <pubDate>Mon, 24 Jun 2019 09:15:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-006/</guid>
      <description>&lt;h2 id=&#34;理解什么是序列化&#34;&gt;理解什么是序列化&lt;/h2&gt;

&lt;p&gt;在我面试有接口测试经验的候选人的时候，经常会问一个问题：如何对返回的响应结果（假设json格式）中的字段值进行断言？我一般得到的答复是&lt;strong&gt;通过正则表达式&lt;/strong&gt;，有一部分候选人会说&lt;strong&gt;使用JSON Path&lt;/strong&gt;，这就是让我非常困惑的一个地方：好像大部分测试人员都不知道&lt;strong&gt;序列化&lt;/strong&gt;和&lt;strong&gt;反序列化&lt;/strong&gt;这种重要的基础概念。&lt;/p&gt;

&lt;p&gt;我以一个例子来展开：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, age, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;courses):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;courses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; courses

mike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Student(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike Hsu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chinese&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战5 - 面向服务封装</title>
      <link>https://blog.xuh.me/posts/api-testing-005/</link>
      <pubDate>Sun, 23 Jun 2019 09:15:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-005/</guid>
      <description>&lt;p&gt;上一篇我们封装了&lt;code&gt;def list_issues()&lt;/code&gt;接口，在这一节正式开讲前，我们以同样的方法封装另外个接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://www.redmine.org/projects/redmine/wiki/Rest_Issues#Listing-issues&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_issues&lt;/span&gt;(api_key, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;按条件查询issue&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://redmine.xuh.me/issues.json&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kwargs, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Redmine-API-Key&amp;#34;&lt;/span&gt;: api_key})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text


&lt;span style=&#34;color:#75715e&#34;&gt;# https://www.redmine.org/projects/redmine/wiki/Rest_Issues#Showing-an-issue&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_issue&lt;/span&gt;(api_key, issue_id, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;根据issue_id获取issue详情&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://redmine.xuh.me/issues/{}.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(issue_id), params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kwargs, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Redmine-API-Key&amp;#34;&lt;/span&gt;: api_key})&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战4 - 封装redmine接口</title>
      <link>https://blog.xuh.me/posts/api-testing-004/</link>
      <pubDate>Mon, 03 Jun 2019 17:29:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-004/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为了更好的演示接口测试，笔者部署了一个&lt;a href=&#34;http://redmine.xuh.me&#34;&gt;Redmine服务&lt;/a&gt;，本系列文章均以该系统作为被测试服务，当然你也可以自己搭建一个redmine系统，可以利用docker快速部署：&lt;a href=&#34;https://hub.docker.com/_/redmine&#34;&gt;https://hub.docker.com/_/redmine&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-接口文档&#34;&gt;1. 接口文档&lt;/h2&gt;

&lt;p&gt;接口文档是进行接口测试的必要输入，一份好的接口文档笔者认为需要包含以下要素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接口的鉴权方法&lt;/li&gt;
&lt;li&gt;接口的调用时序&lt;/li&gt;
&lt;li&gt;接口的必传、可选参数，以及各参数的语义&lt;/li&gt;
&lt;li&gt;接口响应报文，以及相关字段语义&lt;/li&gt;
&lt;li&gt;接口请求、响应报文demo&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战3 - 接口封装的基石：requests.Session</title>
      <link>https://blog.xuh.me/posts/api-testing-003/</link>
      <pubDate>Tue, 29 May 2018 09:01:07 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-003/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://my-storage.oss-cn-shanghai.aliyuncs.com/picgo/20190419090155.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;笔者在面试候选人的时候，如果恰巧对方使用过&lt;code&gt;requests&lt;/code&gt;库，一般会问一个问题：谈一下你对&lt;code&gt;requests.Session&lt;/code&gt;对象的理解？&lt;/p&gt;

&lt;p&gt;一个很简单的问题，但印象中几乎没有候选人回答上来过，而且很多人在使用&lt;code&gt;requests&lt;/code&gt;做接口测试，但居然不知道&lt;code&gt;Session&lt;/code&gt;这个对象，这让我有点匪夷所思。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战02 - 接口测试的本质</title>
      <link>https://blog.xuh.me/posts/api-testing-002/</link>
      <pubDate>Sun, 20 May 2018 08:53:34 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-002/</guid>
      <description>&lt;p&gt;在上一篇简单的介绍了接口测试里用到的工具、类库后，本篇正式开始讲用Python进行接口测试实战。&lt;/p&gt;

&lt;h3 id=&#34;1-从一个登录接口了解接口调用的方法&#34;&gt;1. 从一个登录接口了解接口调用的方法&lt;/h3&gt;

&lt;p&gt;现在假设有一个登录接口&lt;code&gt;POST /api/login&lt;/code&gt;，该接口有两个入参&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;，分别表示帐号的用户名以及密码，那该如何调用该接口呢？&lt;/p&gt;

&lt;p&gt;&lt;em&gt;以下该登录接口都以一个临时的url:&lt;a href=&#34;http://requestbin.qahub.net/z3m6v8z3来替代&#34;&gt;http://requestbin.qahub.net/z3m6v8z3来替代&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-1-curl做接口调用&#34;&gt;1.1 curl做接口调用：&lt;/h4&gt;

&lt;p&gt;先用curl来做一个简单的例子：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python接口测试实战01：七种武器</title>
      <link>https://blog.xuh.me/posts/api-testing-001/</link>
      <pubDate>Sat, 19 May 2018 08:42:22 +0800</pubDate>
      <author>jace.xh@gmail.com (jacexh)</author>
      <guid>https://blog.xuh.me/posts/api-testing-001/</guid>
      <description>&lt;p&gt;工欲善其事必先利其器，在正式开始介绍使用Python做接口测试前，我们先准备好相应的工具，这样就能快速上手接口测试了。&lt;/p&gt;

&lt;h3 id=&#34;0-python&#34;&gt;0. Python&lt;/h3&gt;

&lt;p&gt;在测试领域Python其实大有可为，不管是Web、移动端、接口、嵌入式测试都能看到Python的身影。而且因为Python语法的简单性，用Python做自动化测试的效率极高。&lt;/p&gt;

&lt;p&gt;有人可能会说：&lt;strong&gt;Python运行效率低啊。&lt;/strong&gt;可是你想想，在自动化测试应用时，我们需要在乎底层脚本语言的运行效率吗？与其在乎运行效率，还不如思考下如何快速提高自动化测试的覆盖率，也就是自动化case的开发效率。&lt;/p&gt;

&lt;p&gt;Python有Python2以及Python3两个大版本，Python2行将就木，本系列文章都以Python3为基础，而且有可能会使用到Python3.5以上版本的特性。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>